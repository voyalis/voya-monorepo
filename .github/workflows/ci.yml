name: VoyaMonorepo CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop
      - 'release/**'
permissions: # YENİ EKLENEN BÖLÜM
  contents: read
  packages: write 

jobs:
  api-ci: # Sadece API için lint, test, build
    name: API - Lint, Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Turborepo 'affected' için

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Root Dependencies
        run: npm ci

      - name: Derive SHAs for `turbo affected`
        id: setshas # nrwl/nx-set-shas Turbo ile de çalışır veya Turbo kendi mekanizmasını kullanır
        uses: nrwl/nx-set-shas@v4

      - name: Lint API
        run: npx turbo run lint --filter='@voya/api[${{ steps.setshas.outputs.base }}...${{ steps.setshas.outputs.head }}]'

      - name: Test API
        run: npx turbo run test --filter='@voya/api[${{ steps.setshas.outputs.base }}...${{ steps.setshas.outputs.head }}]' -- --passWithNoTests

      - name: Build API
        run: npx turbo run build --filter='@voya/api[${{ steps.setshas.outputs.base }}...${{ steps.setshas.outputs.head }}]'

  mobile-ci: # Sadece Mobil için lint, test, build
    name: Mobile - Lint, Test & Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Turborepo 'affected' için

      - name: Setup Node.js # Turborepo ve npm script'leri için gerekebilir
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install Root Dependencies # Ana package.json'daki script'leri kullanmak için
        run: npm ci

      - name: Derive SHAs for `turbo affected`
        id: setshas
        uses: nrwl/nx-set-shas@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Mobile Dependencies (pub get)
        run: cd apps/mobile && flutter pub get
        # VEYA eğer apps/mobile/package.json'da "postinstall": "flutter pub get" varsa
        # ana dizinde "npm run postinstall --filter=@voya/mobile" da denenebilir.
        # Şimdilik direkt komut daha net.

      - name: Lint Mobile
        # Ana package.json'daki script'i kullanıyoruz:
        run: npm run lint:mobile # Bu "turbo run lint --filter='@voya/mobile[...affected...]' " çalıştırır
        # Eğer nrwl/nx-set-shas'ın ortam değişkenleri burada da geçerliyse,
        # filter'ı doğrudan kullanabiliriz:
        # run: npx turbo run lint --filter='@voya/mobile[${{ steps.setshas.outputs.base }}...${{ steps.setshas.outputs.head }}]'

      - name: Test Mobile
        run: npm run test:mobile # Bu "turbo run test --filter='@voya/mobile[...affected...]' " çalıştırır

      - name: Build Mobile APK (Android Debug)
        run: npm run build:mobile # Bu "turbo run build --filter='@voya/mobile[...affected...]' " çalıştırır

      - name: Upload Android APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: voya-mobile-apk
          path: apps/mobile/build/app/outputs/flutter-apk/app-debug.apk

  # --- DEPLOY JOBS (Bunlar ayrı job'lar olarak kalacak ve kendi 'needs' ve 'if' koşullarına sahip olacak) ---
  build-and-push-api-image:
    name: Build and Push API Docker Image
    runs-on: ubuntu-latest
    needs: api-ci # API CI başarılı olduktan sonra çalışsın
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push API Image
        id: docker_build_api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/voya-api:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/voya-api:${{ github.ref_name }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image Digest
        run: echo "API Image digest ${{ steps.docker_build_api.outputs.digest }}"

  deploy-api-to-fly:
    name: Deploy API to Fly.io
    runs-on: ubuntu-latest
    needs: build-and-push-api-image # İmaj push edildikten sonra çalışsın
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    # environment: voya-api-test-fly-io

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: flyctl deploy --config ./fly.toml --app voya-api-test --image ghcr.io/${{ github.repository_owner }}/voya-api:${{ github.sha }} --remote-only --detach --ha=false
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  run-neon-migrations:
    name: Run SQL Migrations on Neon DB
    runs-on: ubuntu-latest
    needs: deploy-api-to-fly # API başarıyla deploy edildikten sonra çalışsın
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    env: # Bu env bloğu tüm job için geçerli olacak
      NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL_SECRET }}
      # PGPASSWORD: ${{ secrets.NEON_DB_RAW_PASSWORD_SECRET }} # Eğer ayrı bir şifre secret'ınız varsa

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install PostgreSQL Client (psql)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Make migrate.sh executable
        run: chmod +x ./migrate.sh

      - name: Debug NEON_DATABASE_URL
        # Karmaşık env bloğunu kaldırıp, kontrolü ve yazdırmayı run script'ine taşıdık.
        # 'run:' anahtarı 'name:' ile aynı hizada olmalı.
        run: |
          echo "--- Debugging NEON_DATABASE_URL ---"
          if [ -z "${NEON_DATABASE_URL}" ]; then
            echo "::error::NEON_DATABASE_URL secret is not set or is empty!"
            exit 1
          else
            echo "✅ NEON_DATABASE_URL is set."
            # Şifreyi loglamamak için URL'nin sadece @ işaretine kadar olan kısmını veya ilk ~30 karakterini gösterelim.
            # Bash parametre genişletmesi kullanıyoruz: ${VARIABLE:OFFSET:LENGTH}
            # @ işaretinin pozisyonunu bulalım (eğer varsa)
            # 'expr index' bir string içinde başka bir stringin ilk karakterinin pozisyonunu verir.
            # Eğer NEON_DATABASE_URL boşsa veya @ içermiyorsa expr hata verebilir, bu yüzden önce varlığını kontrol edelim.
            local at_position=0
            if [[ "${NEON_DATABASE_URL}" == *"@"* ]]; then
              # Geçici bir değişkene atayarak @ işaretine kadar olan kısmı alalım
              local temp_url_prefix="${NEON_DATABASE_URL%%@*}"
              # Bu prefix'in uzunluğunu alalım
              at_position=${#temp_url_prefix}
            fi

            local prefix_length=30 # Varsayılan gösterilecek uzunluk
            # Eğer @ işareti varsa ve 30 karakterden kısaysa, @'e kadar olan kısmı al
            if [ "$at_position" -gt 0 ] && [ "$at_position" -lt "$prefix_length" ]; then
              prefix_length=$((at_position))
            fi
            echo "🔍 NEON_DATABASE_URL prefix (first ~${prefix_length} chars): ${NEON_DATABASE_URL:0:${prefix_length}}..."
          fi
          echo "--- End Debugging NEON_DATABASE_URL ---"

      - name: Run SQL Migrations on Neon
        # migrate.sh script'i, job seviyesinde tanımlanan NEON_DATABASE_URL
        # ortam değişkenini otomatik olarak alacaktır.
        run: ./migrate.sh